// // 1 - üöÄ Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
// function testingScope(escopo) {
//   if (escopo === true) {
//     let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//     ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
//     console.log(ifScope);
//   } else {
//     const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//     console.log(elseScope);
//   }
// }

// testingScope(true);

// //Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function.
// const testingScope = escopo => { 
//   if (escopo === true) {
//     let ifScope = `N√£o devo ser utilizada fora do meu escopo (if)`;
//     ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
//     console.log(ifScope);
//   } else {
//     const elseScope = `N√£o devo ser utilizada fora meu escopo (else)`;
//     console.log(elseScope);
//   }
// }

// testingScope(true);


// // Modifique as concatena√ß√µes para template literals

// function testingScope(escopo) {
//   if (escopo === true) {
//     let ifScope = `N√£o devo ser utilizada fora do meu escopo (if)`;
//     ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
//     console.log(ifScope);
//   } else {
//     const elseScope = `N√£o devo ser utilizada fora meu escopo (else)`;
//     console.log(elseScope);
//   }
// }

// testingScope(true);

// // // 2 - üöÄ Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

oddsAndEvens.sort((a, b) => a - b);

console.log(`Os n√∫meros ${oddsAndEvens} se encontram ordenados de forma crescente!`);
