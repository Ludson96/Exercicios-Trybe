// //üöÄ 1 - A fun√ß√£o sum(a, b) retorna a soma do par√¢metro a com o b
// // 1 -Teste se o retorno de sum(4, 5) √© 9
// const sum = require('./sum');
// describe('Teste do describe', () => {
//   it('Testando se o retorno de sum(4,5) √© 9', () => {
//     expect(sum(4, 5)).toEqual(9);
//   });
// // // 2 - Teste se o retorno de sum(0, 0) √© 0
//   it('Testando se o retorno de sum(0,0) √© 0', () => {
//     expect(sum(0, 0)).toEqual(0);
//   });
// // // 3 - Teste se a fun√ß√£o sum lan√ßa um erro quando os par√¢metros s√£o 4 e "5"(string 5)
//   it('Testando se a fun√ß√£o sum lan√ßa um erro qunando os par√¢metros s√£o 4 e "5"', () => {
//     expect(() => sum(4, '5')).toThrow(Error);
//   });
// // // 4 - Teste se a mensagem de erro √© "parameters must be numbers" quando realizar a chamada sum(4, "5")
//   it('Testando se a mensagem de erro √© "parameters must be numbers" quando realizar a chamada sum(4, "5")', () => {
//     expect(() => sum(4, '5')).toThrow('parameters must be numbers');
//   });
// });

// // üöÄ 2 - A fun√ß√£o myRemove(arr, item) recebe um array arr e retorna uma c√≥pia desse array sem o elemento item caso ele exista no array
// const myRemove = require('./sum');

// describe('Exercicio 2', () => {
//   it('Verifique se a chamada myRemove([1, 2, 3, 4], 3) retorna o array esperado', () => {
//     expect(myRemove([1, 2, 3, 4], 3)).toEqual([1, 2, 4]);
//   });

//   it('Verifique se a chamada myRemove([1, 2, 3, 4], 3) n√£o retorna o array [1, 2, 3, 4]', () => {
//     expect(myRemove([1, 2, 3, 4], 3)).not.toEqual([1, 2, 3, 4]);
//   });

//   it('Verifique se a chamada myRemove([1, 2, 3, 4], 5) retorna o array esperado', () => {
//     expect(myRemove([1, 2, 3, 4], 5)).toEqual([1, 2, 3, 4]);
//   });
// });

// const myFizzBuzz = require('./sum');

// describe('Exercicio 3', () => {
//   it('Fa√ßa uma chamada com um n√∫mero divis√≠vel por 3 e 5 e verifique se o retorno √© o esperado', () => {
//     expect(myFizzBuzz(15)).toBe('fizzbuzz');
//   })

//   it('Fa√ßa uma chamada com um n√∫mero divis√≠vel por 3 e verifique se o retorno √© o esperado', () => {
//     expect(myFizzBuzz(6)).toBe('fizz');
//   })

//   it('Fa√ßa uma chamada com um n√∫mero divis√≠vel por 5 e verifique se o retorno √© o esperado', () => {
//     expect(myFizzBuzz(10)).toBe('buzz');
//   })

//   it('Fa√ßa uma chamada com um n√∫mero que n√£o √© divis√≠vel por 3 ou 5 e verifique se o retorno √© o esperado', () => {
//     expect(myFizzBuzz(7)).toBe(7);
//   })

//   it('Fa√ßa uma chamada com um par√¢metro que n√£o √© um n√∫mero e verifique se o retorno √© o esperado', () => {
//     expect(myFizzBuzz('7')).toBe(false);
//   })
// })

// const { encode, decode } = require('./sum');

// describe('Exercicio 4', () => {
//   it('Teste se encode s√£o fun√ß√µes', () => {
//     expect(encode).toBeDefined();
//   })

//   it('Teste se decode s√£o fun√ß√µes', () => {
//     expect(typeof decode).toEqual('function');
//   })

//   it('Para a fun√ß√£o encode teste se as vogais a, e, i, o, u s√£o convertidas em 1, 2, 3, 4 e 5, respectivamente;', () => {
//     expect(encode('teste')).toBe('t2st2');
//   })

//   it('Para a fun√ß√£o decode teste se os n√∫meros 1, 2, 3, 4 e 5 s√£o convertidos nas vogais a, e, i, o, u, respectivamente;', () => {
//     expect(decode('1', '2', '3', '4', '5')).toBe('a', 'e', 'i', 'o', 'u');
//   })

//   it('Teste se as demais letras/n√∫meros n√£o s√£o convertidos para cada caso;', () => {
//     expect(encode('q', 'w', 'e', 'r', 't')).not.toBe('1', '2', '3', '4', '5');
//   })

//   it('Teste se as demais letras/n√∫meros n√£o s√£o convertidos para cada caso;', () => {
//     expect(encode('6', '7', '8', '9', '0')).not.toBe('a', 'e', 'i', 'o', 'u');
//   })

//   it('Teste se a string que √© retornada pelas fun√ß√µes t√™m o mesmo n√∫mero de caracteres que a string passada como par√¢metro.', () => {
//     expect(encode('trybe').length).toBe(5);
//   })
// })

// const techList = require('./sum');

// describe('Testa a fun√ß√£o techList', () => {
//   it('Testa se a fun√ß√£o techList √© definida', () => {
//     expect(techList).toBeDefined();
//   });
//   it('Testa se techList √© uma fun√ß√£o', () => {
//     expect(typeof techList).toBe('function');
//   });
//   it('Lista com 5 tecnologias deve retornar uma lista de objetos ordenados', () => {
//     expect(techList(['React', 'Jest', 'HTML', 'CSS', 'JavaScript'], 'Lucas')).toEqual([
//       {
//         tech: 'CSS',
//         name: 'Lucas'
//       },
//       {
//         tech: 'HTML',
//         name: 'Lucas'
//       },
//       {
//         tech: 'JavaScript',
//         name: 'Lucas'
//       },
//       {
//         tech: 'Jest',
//         name: 'Lucas'
//       },
//       {
//         tech: 'React',
//         name: 'Lucas'
//       }
//     ]);
//   });
//   it('Lista com 0 tecnologias deve retornar uma mensagem de erro "Vazio!"', () => {
//     expect(techList([], 'Lucas')).toBe('Vazio!');
//   });
// });

// const hydrate = require('./sum');

// describe('Testa a fun√ß√£o hydrate', () => {
//   it('Testa se a fun√ß√£o hydrate √© definida', () => {
//     expect(hydrate).toBeDefined();
//   });
//   it('Testa se hydrate √© uma fun√ß√£o', () => {
//     expect(typeof hydrate).toBe('function');
//   });
//   it('Ao receber uma string retorne a sugest√£o de quantos copos de √°gua deve-se beber', () => {
//     expect(hydrate('1 cerveja')).toBe('1 copo de √°gua');
//     expect(hydrate('1 cacha√ßa, 5 cervejas e 1 copo de vinho')).toBe('7 copos de √°gua');
//     expect(hydrate('2 shots de tequila, 2 cervejas e 1 corote')).toBe('5 copos de √°gua');
//     expect(hydrate('1 copo de catuaba, 1 cervejas e 1 copo de vinho')).toBe('3 copos de √°gua');
//     expect(hydrate('4 caipirinhas e 2 cervejas')).toBe('6 copos de √°gua');
//   });
// });
